<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:oxm="http://www.springframework.org/schema/oxm"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:jdbc="http://www.springframework.org/schema/jdbc"
    xmlns:lang="http://www.springframework.org/schema/lang"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns="http://www.springframework.org/schema/beans"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
        http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-3.0.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd" >

    <import resource="cloud-config.xml" />
    <!-- inject loadbalancer util classes (helpers, etc.) -->
    <context:component-scan base-package="com.msi.tough.query.elasticloadbalancing" />
    <!-- inject core action classes (ActionTestHelper, etc.) -->
    <context:component-scan base-package="com.msi.tough.query" />
    <!-- inject project action classes (Describe, etc.) -->
    <context:component-scan base-package="com.transcend.loadbalancer" />

    <!-- service definitions for load balancer -->
    <bean id="ConfigureHealthCheck"
        class="com.msi.tough.query.elasticloadbalancing.ConfigureHealthCheck"/>

    <bean id="ConfigureHealthCheckWorker"
        class="com.transcend.loadbalancer.worker.ConfigureHealthCheckWorker"/>

    <bean id="CreateAppCookieStickinessPolicy"
        class="com.msi.tough.query.elasticloadbalancing.CreateAppCookieStickinessPolicy"/>

    <bean id="CreateAppCookieStickinessPolicyWorker"
        class="com.transcend.loadbalancer.worker.CreateAppCookieStickinessPolicyWorker"/>

    <bean id="CreateLBCookieStickinessPolicy"
        class="com.msi.tough.query.elasticloadbalancing.CreateLBCookieStickinessPolicy"/>

    <bean id="CreateLBCookieStickinessPolicyWorker"
        class="com.transcend.loadbalancer.worker.CreateLBCookieStickinessPolicyWorker"/>

    <bean id="CreateLoadBalancer"
        class="com.msi.tough.query.elasticloadbalancing.CreateLoadBalancer"/>

    <bean id="CreateLoadBalancerWorker"
        class="com.transcend.loadbalancer.worker.CreateLoadBalancerWorker"/>

    <bean id="StandUpLoadBalancerWorker"
        class="com.transcend.loadbalancer.worker.StandUpLoadBalancerWorker"/>

    <bean id="CreateLoadBalancerListeners"
        class="com.msi.tough.query.elasticloadbalancing.CreateLoadBalancerListeners"/>

    <bean id="CreateLoadBalancerListenersWorker"
        class="com.transcend.loadbalancer.worker.CreateLoadBalancerListenersWorker"/>

    <bean id="DeleteLoadBalancer"
        class="com.msi.tough.query.elasticloadbalancing.DeleteLoadBalancer"/>

    <bean id="DeleteLoadBalancerWorker"
        class="com.transcend.loadbalancer.worker.DeleteLoadBalancerWorker"/>

    <bean id="ShutDownLoadBalancerWorker"
        class="com.transcend.loadbalancer.worker.ShutDownLoadBalancerWorker"/>

    <bean id="DeleteLoadBalancerListeners"
        class="com.msi.tough.query.elasticloadbalancing.DeleteLoadBalancerListeners"/>

    <bean id="DeleteLoadBalancerListenersWorker"
        class="com.transcend.loadbalancer.worker.DeleteLoadBalancerListenersWorker"/>

    <bean id="DeregisterInstancesFromLoadBalancer"
        class="com.msi.tough.query.elasticloadbalancing.DeregisterInstancesFromLoadBalancer"/>

    <bean id="DeregisterInstancesFromLoadBalancerWorker"
        class="com.transcend.loadbalancer.worker.DeregisterInstancesFromLoadBalancerWorker"/>

    <bean id="DeregisterInstancesFromLoadBalancerPhaseWorker"
        class="com.transcend.loadbalancer.worker.DeregisterInstancesFromLoadBalancerPhaseWorker"/>

    <bean id="DescribeInstanceHealth"
        class="com.msi.tough.query.elasticloadbalancing.DescribeInstanceHealth"/>

    <bean id="DescribeInstanceHealthWorker"
        class="com.transcend.loadbalancer.worker.DescribeInstanceHealthWorker"/>

    <bean id="DescribeLoadBalancers"
        class="com.msi.tough.query.elasticloadbalancing.DescribeLoadBalancers"/>

    <bean id="DescribeLoadBalancersWorker"
        class="com.transcend.loadbalancer.worker.DescribeLoadBalancersWorker"/>

    <bean id="RegisterInstancesWithLoadBalancer"
        class="com.msi.tough.query.elasticloadbalancing.RegisterInstancesWithLoadBalancer"/>

    <bean id="RegisterInstancesWithLoadBalancerWorker"
        class="com.transcend.loadbalancer.worker.RegisterInstancesWithLoadBalancerWorker"/>

    <bean id="RegisterInstancesWithLoadBalancerPhaseWorker"
        class="com.transcend.loadbalancer.worker.RegisterInstancesWithLoadBalancerPhaseWorker"/>

    <bean id="UnsupportedAction"
        class="com.msi.tough.query.UnsupportedAction"/>

    <util:map id="actions">
        <entry key="ApplySecurityGroupsToLoadBalancer" value-ref="UnsupportedAction"/>
        <entry key="AttachLoadBalancerToSubnets" value-ref="UnsupportedAction"/>
        <entry key="ConfigureHealthCheck" value-ref="ConfigureHealthCheck"/>
        <entry key="CreateAppCookieStickinessPolicy" value-ref="CreateAppCookieStickinessPolicy"/>
        <entry key="CreateLBCookieStickinessPolicy" value-ref="CreateLBCookieStickinessPolicy"/>
        <entry key="CreateLoadBalancer" value-ref="CreateLoadBalancer"/>
        <entry key="CreateLoadBalancerListeners" value-ref="CreateLoadBalancerListeners"/>
        <entry key="DeleteLoadBalancer" value-ref="DeleteLoadBalancer"/>
        <entry key="DeleteLoadBalancerListeners" value-ref="DeleteLoadBalancerListeners"/>
        <entry key="DeregisterInstancesFromLoadBalancer" value-ref="DeregisterInstancesFromLoadBalancer"/>
        <entry key="DescribeInstanceHealth" value-ref="DescribeInstanceHealth"/>
        <entry key="DescribeLoadBalancers" value-ref="DescribeLoadBalancers"/>
        <entry key="DetachLoadBalancerFromSubnets" value-ref="UnsupportedAction"/>
        <entry key="DisableAvailabilityZonesForLoadBalancer" value-ref="UnsupportedAction"/>
        <entry key="RegisterInstancesWithLoadBalancer" value-ref="RegisterInstancesWithLoadBalancer"/>
    </util:map>

    <bean id="loadBalancerServiceAsync"
        class="com.msi.tough.query.AsyncServiceImpl">
        <constructor-arg ref="actions"/>
    </bean>

    <bean class="com.msi.tough.core.AppctxInjector"/>

    <bean id="servicesPropertyConfigurer"
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
                <list>
                        <value>classpath*:/*.properties</value>
                        <value>classpath*:/loadbalancer.test.ports</value>
                        <value>classpath*:/compute.ports</value>
                </list>
        </property>
    </bean>

    <bean id="endpoint" class="java.lang.String">
        <constructor-arg value="ActionIn"/>
    </bean>
    <bean id="rawEndpoint" class="java.lang.String">
        <constructor-arg value="DirectToZMQEntry"/>
    </bean>

    <bean id="remoteEndpoint" class="java.lang.String">
        <constructor-arg value="tcp://${deploy.ip}:${remote.loadbalancer.port}"/>
    </bean>

    <bean id="recvEndpoint" class="java.lang.String">
        <constructor-arg value="tcp://*:${response.loadbalancer.port}"/>
    </bean>

    <bean id="returnAddress" class="java.lang.String">
        <constructor-arg value="tcp://${tester.host}:${response.loadbalancer.port}"/>
    </bean>

    <bean id="workflow" factory-method="getInstance"
    class="com.msi.tough.workflow.core.MuleWorkflow">
    </bean>

    <util:list id="possibleTypes">
        <value>com.msi.tough.message.CoreMessage$ErrorResult</value>
        <value>com.transcend.loadbalancer.message.ConfigureHealthCheckMessage$ConfigureHealthCheckResponse</value>
        <value>com.transcend.loadbalancer.message.CreateAppCookieStickinessPolicyMessage$CreateAppCookieStickinessPolicyResponse</value>
        <value>com.transcend.loadbalancer.message.CreateLBCookieStickinessPolicyMessage$CreateLBCookieStickinessPolicyResponse</value>
        <value>com.transcend.loadbalancer.message.CreateLoadBalancerListenersMessage$CreateLoadBalancerListenersResult</value>
        <value>com.transcend.loadbalancer.message.CreateLoadBalancerMessage$CreateLoadBalancerResult</value>
        <value>com.transcend.loadbalancer.message.DeleteLoadBalancerListenersMessage$DeleteLoadBalancerListenersResult</value>
        <value>com.transcend.loadbalancer.message.DeleteLoadBalancerMessage$DeleteLoadBalancerResponse</value>
        <value>com.transcend.loadbalancer.message.DeregisterInstancesFromLoadBalancerMessage.DeregisterInstancesFromLoadBalancerResponse</value>
        <value>com.transcend.loadbalancer.message.DescribeInstanceHealthMessage.DescribeInstanceHealthResponse</value>
        <value>com.transcend.loadbalancer.message.DescribeLoadBalancersMessage$DescribeLoadBalancersResult</value>
        <value>com.transcend.loadbalancer.message.RegisterInstancesWithLoadBalancerMessage.RegisterInstancesWithLoadBalancerResponse</value>
    </util:list>

    <bean id="remoteWorkflow" factory-method="getInstance" destroy-method="destroy"
    class="com.msi.tough.workflow.core.RemoteWorkflow">
        <property name="possibleTypes" ref="possibleTypes"/>
    </bean>

    <util:list id="computePossibleTypes">
        <value>com.msi.tough.message.CoreMessage$ErrorResult</value>
        <value>com.transcend.compute.message.RunInstancesMessage$RunInstancesResponseMessage</value>
    </util:list>

    <bean id="remoteComputeWorkflow" factory-method="getInstance" destroy-method="destroy"
    class="com.msi.tough.workflow.core.RemoteWorkflow">
        <property name="remoteEndpoint" value="tcp://${deploy.ip}:${compute.port}" />
        <property name="recvEndpoint" value="tcp://*:${response.compute.port}" />
        <property name="returnAddress" value="tcp://${tester.host}:${response.compute.port}" />
        <property name="possibleTypes" ref="computePossibleTypes"/>
    </bean>

    <bean id="workflowIgniter" factory-method="getInstance"
    class="com.msi.tough.workflow.core.MuleIgniter">
        <property name="configFiles" value="mule-workflow-config.xml,mule-test-transports-config.xml"/>
    </bean>

    <bean id="workflowSubmitter"
        class="com.msi.tough.workflow.WorkflowSubmitter"/>

    <bean id="workflowSubmitterToWebapp"
        class="com.msi.tough.workflow.WorkflowSubmitter">
        <property name="workflow" ref="remoteWorkflow"/>
    </bean>

    <bean id="workflowSubmitterToCompute"
        class="com.msi.tough.workflow.WorkflowSubmitter">
        <property name="workflow" ref="remoteComputeWorkflow"/>
    </bean>

    <bean id="actionHelper" class="com.msi.tough.query.ActionHelper">
    </bean>

    <!-- compute setup, for creating instances -->
    <bean id="computeClient" class="com.amazonaws.services.ec2.AmazonEC2Client" >
        <constructor-arg ref="basicAWSCredentials" />
        <property name="endpoint" value="#{ defaultAvailabilityZone == 'us-east-1a' ? 'http://ec2.us-east-1.amazonaws.com/' : 'http://${deploy.ip}:8080/Compute/comp-async/' }" />
    </bean>

    <bean id="baseImageId" class="java.lang.String">
        <constructor-arg value="${base.image.id}"/>
   </bean>

    <bean id="defaultFlavor" class="java.lang.String">
        <constructor-arg value="${default.flavor}"/>
   </bean>

    <bean id="runningInstanceHelper" class="com.msi.tough.helper.RunningInstanceHelper" >
    </bean>

    <!-- auto-inject, autowire using annotations -->
    <context:annotation-config />


    <bean
        id="log4jInitializer"
        class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">

        <property
            name="targetClass"
            value="org.springframework.util.Log4jConfigurer" />

        <property name="targetMethod" value="initLogging" />

        <property name="arguments" >
            <list>
                <value>classpath:log4j.xml</value>
            </list>
        </property>
    </bean>

    <bean id="accessKey" class="java.lang.String">
        <constructor-arg value="${test.accessKey}"/>
    </bean>

    <bean id="secretKey" class="java.lang.String">
        <constructor-arg value="${test.secretKey}"/>
    </bean>
    <bean id="testAccountId" class="java.lang.Long">
        <constructor-arg value="1"/>
    </bean>

    <bean id="DB_PASSWORD" class="java.lang.String">
        <constructor-arg value="${db.password}"></constructor-arg>
    </bean>

    <bean id="INSTALL_ID" class="java.lang.String">
        <constructor-arg value="unit-test"></constructor-arg>
    </bean>

    <bean id="limitedQuotaAccessKey" class="java.lang.String">
        <constructor-arg value="${test.limitedQuotaAccessKey}"/>
    </bean>

    <bean id="limitedQuotaSecretKey" class="java.lang.String">
        <constructor-arg value="${test.limitedQuotaSecretKey}"/>
    </bean>

    <bean id="limitedQuotaOwnerId" class="java.lang.String">
        <constructor-arg value="${test.limitedQuotaOwnerId}"/>
    </bean>

    <bean id="limitedQuotaZone" class="java.lang.String">
        <constructor-arg value="${test.limitedQuotaZone}"/>
    </bean>

    <bean id="basicAWSCredentials" class="com.amazonaws.auth.BasicAWSCredentials" >
        <constructor-arg value="${test.accessKey}" />
        <constructor-arg value="${test.secretKey}" />
    </bean>

    <bean id="badAWSCredentials" class="com.amazonaws.auth.BasicAWSCredentials" >
        <constructor-arg value="123412341234" />
        <constructor-arg value="456456456456" />
    </bean>

    <bean id="httpEndpoint" class="java.lang.String">
        <constructor-arg value="http://${deploy.ip}:8080/LoadBalancerQuery/loadbalancer-async/"/>
    </bean>

    <bean id="targetServer" class="java.lang.String">
        <constructor-arg value="${deploy.ip}"/>
    </bean>

    <bean id="defaultAvailabilityZone" class="java.lang.String">
        <constructor-arg value="${default.availability.zone}"/>
    </bean>

    <bean id="tenant" class="java.lang.String">
        <constructor-arg value="${ec2.owner.id}"/>
    </bean>

    <bean id="internalServiceHost" class="java.lang.String">
        <constructor-arg value="${internal.service.host}"></constructor-arg>
    </bean>
    <bean id="internalServiceIp" class="java.lang.String">
        <constructor-arg value="${internal.service.ip}"></constructor-arg>
    </bean>

    <bean id="security" factory-method="getInstance"
        class="com.msi.tough.security.AESSecurity">
    </bean>

    <!-- stand-in for full cloud config, with only the current test. -->
    <util:map id="configuration0">
        <entry key="YUMHOST" value=""></entry>
        <entry key="CHEF_USER_ID" value="${CHEF_USER_ID}"></entry>
        <entry key="CHEF_PRIVATE_KEY" value="${CHEF_PRIVATE_KEY}"></entry>
        <entry key="CHEF_API_URL" value="${CHEF_API_URL}"></entry>
        <entry key="CHEF_IP" value="${CHEF_IP}"></entry>
        <entry key="CHEF_SERVER" value="${CHEF_SERVER}"></entry>
        <entry key="CHEF_ENV" value="${chef.env}"></entry>
        <entry key="KEYS_DIR" value="."/>
        <entry key="INTERNAL_SERVICE_HOST" value-ref="internalServiceHost"></entry>
        <entry key="INTERNAL_SERVICE_IP" value-ref="internalServiceIp"></entry>
        <entry key="SERVLET_URL" value="http://${deploy.ip}:8080/RDSQuery"></entry>
        <entry key="TRANSCEND_URL" value="http://${deploy.ip}:8080/ASInternal"></entry>
        <entry key="AvailabilityZone" value="${default.availability.zone}"/>
    </util:map>

    <bean id="configuration" factory-method="merge" class="com.msi.tough.core.MapUtil">
        <constructor-arg ref="cloud-config"></constructor-arg>
        <constructor-arg ref="configuration0"></constructor-arg>
    </bean>

    <bean id="appctx" factory-method="getInstanceForInjection"
        class="com.msi.tough.core.Appctx">
        <property name="configuration" ref="configuration"/>
        <!-- use a single thread executor, so tests don't have to wait. -->
        <property name="executorServiceInstance">
            <bean class="com.msi.tough.utils.SynchronousExecutor"/>
        </property>
    </bean>

    <bean class="com.msi.tough.core.AppctxInjector"/>

    <bean id="hibernateUtil" class="com.msi.tough.core.HibernateUtil">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>

    <bean id="TemplateExecutor" class="com.msi.tough.engine.core.TemplateExecutor">
    </bean>
    <bean id="TemplateHelper" class="com.msi.tough.core.TemplateHelper"
    factory-method="getInstance">
        <property name="templateDir" value="${TOUGH_CONFIG_DIR}/ftl"/>
        <property name="logDir" value="."/>
        <property name="workDir" value="."/>
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager"/>

    <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>

    <bean id="sessionFactory"
        class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
        <property name="dataSource" ref="testConnection" />
        <property name="configLocation" value="classpath:hibernate.cfg.xml"></property>
        <property name="configurationClass" value="org.hibernate.cfg.AnnotationConfiguration"></property>
        <property name="hibernateProperties">
            <value>hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
                hibernate.cache.provider_class=org.hibernate.cache.NoCacheProvider
                hibernate.show_sql=false
                hibernate.hbm2ddl.auto=update
            </value>
        </property>
    </bean>

    <bean id="testConnection" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="jdbc:mysql://${deploy.ip}:3306/msi" />
        <property name="username" value="msi" />
        <property name="password" value="${db.password}" />
        <property name="defaultAutoCommit" value="false"></property>
        <property name="initialSize" value="1"></property>
        <property name="maxActive" value="5"></property>
        <property name="testWhileIdle" value="false"></property>
        <property name="testOnBorrow" value="false"></property>
        <property name="testOnReturn" value="false"></property>
        <property name="validationQuery" value="SELECT 1"></property>
        <property name="timeBetweenEvictionRunsMillis" value="-1"></property>
        <property name="minIdle" value="0"></property>
        <property name="maxWait" value="5000"></property>
        <property name="removeAbandoned" value="false"></property>
    </bean>

</beans>
